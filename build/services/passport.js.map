{"version":3,"sources":["../../server/services/passport.js"],"names":["ExtractJwt","require","JwtStrategy","Strategy","LocalStrategy","localOptions","usernameField","localStrategy","email","password","done","findOne","err","user","comparePassword","isMatch","jwtOptions","secretOrKey","secret","jwtFromRequest","fromHeader","jwtStrategy","payload","findById","sub","use"],"mappings":";;AAAA;;;;AAIA;;;;AACA;;;;;;AAJA,IAAMA,aAAaC,QAAQ,cAAR,EAAwBD,UAA3C;AACA,IAAME,cAAcD,QAAQ,cAAR,EAAwBE,QAA5C;AACA,IAAMC,gBAAgBH,QAAQ,gBAAR,EAA0BE,QAAhD;;;AAIA,IAAME,eAAe;AACjBC,mBAAe;AADE,CAArB;;AAIA,IAAMC,gBAAgB,IAAIH,aAAJ,CAAkBC,YAAlB,EAAgC,UAASG,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgC;AAClF;AACA,mBAAKC,OAAL,CAAa,EAAEH,YAAF,EAAb,EAAwB,UAACI,GAAD,EAAMC,IAAN,EAAe;AACnC,YAAGD,GAAH,EAAQ,OAAOF,KAAKE,GAAL,CAAP;AACR,YAAG,CAACC,IAAJ,EAAU,OAAOH,KAAK,IAAL,EAAW,KAAX,CAAP;AACVG,aAAKC,eAAL,CAAqBL,QAArB,EAA+B,UAASG,GAAT,EAAcG,OAAd,EAAuB;AAClD,gBAAGH,GAAH,EAAQ,OAAOF,KAAKE,GAAL,CAAP;AACR,gBAAG,CAACG,OAAJ,EAAa,OAAOL,KAAK,IAAL,EAAW,KAAX,CAAP;AACb,mBAAOA,KAAK,IAAL,EAAWG,IAAX,CAAP;AACH,SAJD;AAKH,KARD;AASH,CAXqB,CAAtB;;AAaA,IAAMG,aAAa;AACfC,iBAAa,iBAAOC,MADL;AAEfC,oBAAgBnB,WAAWoB,UAAX,CAAsB,eAAtB;AAFD,CAAnB;;AAKA,IAAMC,cAAc,IAAInB,WAAJ,CAAgBc,UAAhB,EAA4B,UAACM,OAAD,EAAUZ,IAAV,EAAmB;AAC/D,mBAAKa,QAAL,CAAcD,QAAQE,GAAtB,EAA2B,UAACZ,GAAD,EAAMC,IAAN,EAAe;AACtC,YAAGD,GAAH,EAAQ,OAAOF,KAAKE,GAAL,EAAU,KAAV,CAAP;AACR,YAAGC,IAAH,EAAS;AACLH,iBAAK,IAAL,EAAWG,IAAX;AACH,SAFD,MAEO;AACHH,iBAAK,IAAL,EAAW,KAAX;AACH;AACJ,KAPD;AAQH,CATmB,CAApB;;AAWA,mBAASe,GAAT,CAAaJ,WAAb;AACA,mBAASI,GAAT,CAAalB,aAAb","file":"passport.js","sourcesContent":["import passport from 'passport';\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst LocalStrategy = require('passport-local').Strategy;\nimport User from '../models/user';\nimport config from '../config';\n\nconst localOptions = {\n    usernameField: 'email'\n};\n\nconst localStrategy = new LocalStrategy(localOptions, function(email, password, done) {\n    // verify the username and password\n    User.findOne({ email }, (err, user) => {\n        if(err) return done(err);\n        if(!user) return done(null, false);\n        user.comparePassword(password, function(err, isMatch) {\n            if(err) return done(err);\n            if(!isMatch) return done(null, false);\n            return done(null, user);\n        })\n    })\n});\n\nconst jwtOptions = {\n    secretOrKey: config.secret,\n    jwtFromRequest: ExtractJwt.fromHeader('authorization')\n};\n\nconst jwtStrategy = new JwtStrategy(jwtOptions, (payload, done) => {\n    User.findById(payload.sub, (err, user) => {\n        if(err) return done(err, false);\n        if(user) {\n            done(null, user);\n        } else {\n            done(null, false)\n        }\n    })\n});\n\npassport.use(jwtStrategy);\npassport.use(localStrategy);\n"]}