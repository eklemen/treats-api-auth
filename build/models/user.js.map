{"version":3,"sources":["../../server/models/user.js"],"names":["Promise","global","Schema","validateEmail","email","test","userSchema","type","String","unique","lowercase","required","validate","password","createdAt","Date","default","now","pre","next","user","isNew","isModified","genSalt","err","salt","hash","methods","comparePassword","candidatePassword","cb","compare","isMatch","User","model"],"mappings":";;;;;;AAAA;;;;AAGA;;;;;;AAFA,mBAASA,OAAT,GAAmBC,OAAOD,OAA1B;IACQE,M,sBAAAA,M;;;AAGR,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD;AAAA,WACjB,eAAD,CAAiBC,IAAjB,CAAsBD,KAAtB;AADkB;AAAA,CAAtB;;AAIA,IAAME,aAAa,IAAIJ,MAAJ,CAAW;AAC1BE,WAAO;AACHG,cAAMC,MADH;AAEHC,gBAAQ,IAFL;AAGHC,mBAAW,IAHR;AAIHC,kBAAU,mBAJP;AAKHC,kBAAU,CAACT,aAAD,EAAgB,6BAAhB;AALP,KADmB;AAQ1BU,cAAU,EAAEN,MAAMC,MAAR,EARgB;AAS1BM,eAAW,EAAEP,MAAMQ,IAAR,EAAcC,SAASD,KAAKE,GAA5B;AATe,CAAX,CAAnB;;AAYAX,WAAWY,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAClC,QAAMC,OAAO,IAAb;AACA,QAAGA,KAAKC,KAAL,IAAcD,KAAKE,UAAL,CAAgB,UAAhB,CAAjB,EAA8C;AAC1C,+BAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC9B,gBAAGD,GAAH,EAAQ,OAAOL,KAAKK,GAAL,CAAP;AACR,mCAAOE,IAAP,CAAYN,KAAKP,QAAjB,EAA2BY,IAA3B,EAAiC,IAAjC,EAAuC,UAACD,GAAD,EAAME,IAAN,EAAe;AAClD,oBAAGF,GAAH,EAAQ,OAAOL,KAAKK,GAAL,CAAP;AACRJ,qBAAKP,QAAL,GAAgBa,IAAhB;AACAP;AACH,aAJD;AAKH,SAPD;AAQH,KATD,MASOA;AAEV,CAbD;;AAeAb,WAAWqB,OAAX,CAAmBC,eAAnB,GAAqC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AACjE,2BAAOC,OAAP,CAAeF,iBAAf,EAAkC,KAAKhB,QAAvC,EAAiD,UAASW,GAAT,EAAcQ,OAAd,EAAuB;AACpE,YAAGR,GAAH,EAAQ,OAAOM,GAAGN,GAAH,CAAP;AACRM,WAAG,IAAH,EAASE,OAAT;AACH,KAHD;AAIH,CALD;;AAOA,IAAMC,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuB5B,UAAvB,CAAb;kBACe2B,I","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nmongoose.Promise = global.Promise;\nconst { Schema } = mongoose;\nimport bcrypt from 'bcrypt-nodejs';\n\nconst validateEmail = (email) => (\n    (/\\S+@\\S+\\.\\S+/).test(email)\n);\n\nconst userSchema = new Schema({\n    email: {\n        type: String,\n        unique: true,\n        lowercase: true,\n        required: 'Email is required',\n        validate: [validateEmail, 'Please enter a valid email.']\n    },\n    password: { type: String },\n    createdAt: { type: Date, default: Date.now }\n});\n\nuserSchema.pre('save', function(next) {\n    const user = this;\n    if(user.isNew || user.isModified('password')) {\n        bcrypt.genSalt(10, (err, salt) => {\n            if(err) return next(err);\n            bcrypt.hash(user.password, salt, null, (err, hash) => {\n                if(err) return next(err);\n                user.password = hash;\n                next();\n            })\n        });\n    } else next();\n\n});\n\nuserSchema.methods.comparePassword = function(candidatePassword, cb) {\n    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {\n        if(err) return cb(err);\n        cb(null, isMatch);\n    })\n};\n\nconst User = mongoose.model('User', userSchema);\nexport default User;\n"]}